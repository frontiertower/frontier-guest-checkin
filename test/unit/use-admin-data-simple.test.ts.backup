/**
 * @jest-environment jsdom
 */

/**
 * Unit tests for admin data hooks using React Testing Library
 * Tests hook interfaces and basic functionality in proper React context
 */

import { renderHook, waitFor, act } from '@testing-library/react';

// Mock dependencies first - mock the entire module
jest.mock('@/hooks/use-toast', () => ({
  useToast: jest.fn(() => ({
    toast: jest.fn(),
  })),
}));

// Mock fetch globally
const mockFetch = jest.fn();
global.fetch = mockFetch;

import { 
  useAdminStats, 
  useAdminPolicies, 
  useAdminActivities, 
  useExecutiveReport, 
  useGlobalSearch,
  useGuestJourney 
} from '@/hooks/use-admin-data';
import { useToast } from '@/hooks/use-toast';

const mockToast = jest.fn();
(useToast as jest.Mock).mockReturnValue({ toast: mockToast });

describe('Admin Data Hooks - Interface Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('useAdminStats', () => {
    it('should return expected interface', () => {
      const { result } = renderHook(() => useAdminStats());
      
      expect(result.current).toHaveProperty('stats');
      expect(result.current).toHaveProperty('isLoading');
      expect(result.current).toHaveProperty('loadStats');
      expect(typeof result.current.loadStats).toBe('function');
    });

    it('should call correct API endpoint for stats', async () => {
      mockFetch.mockResolvedValue(new Response('{"totalVisits": 100}', { status: 200 }));
      
      const { result } = renderHook(() => useAdminStats());
      
      await act(async () => {
        await result.current.loadStats();
      });
      
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/stats');
    });

    it('should call API with location parameter', async () => {
      mockFetch.mockResolvedValue(new Response('{"totalVisits": 50}', { status: 200 }));
      
      const { result } = renderHook(() => useAdminStats());
      
      await act(async () => {
        await result.current.loadStats('location123');
      });
      
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/stats?locationId=location123');
    });
  });

  describe('useAdminPolicies', () => {
    it('should return expected interface', () => {
      const { result } = renderHook(() => useAdminPolicies());
      
      expect(result.current).toHaveProperty('policies');
      expect(result.current).toHaveProperty('isLoading');
      expect(result.current).toHaveProperty('loadPolicies');
      expect(result.current).toHaveProperty('updatePolicies');
      expect(typeof result.current.loadPolicies).toBe('function');
      expect(typeof result.current.updatePolicies).toBe('function');
    });

    it('should call correct API for loading policies', async () => {
      mockFetch.mockResolvedValue(new Response('{"policies": {}}', { status: 200 }));
      
      const { result } = renderHook(() => useAdminPolicies());
      
      await act(async () => {
        await result.current.loadPolicies();
      });
      
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/policies');
    });

    it('should call correct API for updating policies', async () => {
      mockFetch.mockResolvedValue(new Response('{"policies": {}}', { status: 200 }));
      
      const { result } = renderHook(() => useAdminPolicies());
      
      await act(async () => {
        await result.current.updatePolicies({ guestMonthlyLimit: 5, hostConcurrentLimit: 4 });
      });
      
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/policies', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ guestMonthlyLimit: 5, hostConcurrentLimit: 4 })
      });
    });
  });

  describe('useAdminActivities', () => {
    it('should return expected interface', () => {
      const { result } = renderHook(() => useAdminActivities());
      
      expect(result.current).toHaveProperty('activities');
      expect(result.current).toHaveProperty('isLoading');
      expect(result.current).toHaveProperty('loadActivities');
      expect(typeof result.current.loadActivities).toBe('function');
    });

    it('should call correct API endpoint', async () => {
      mockFetch.mockResolvedValue(new Response('{"activities": []}', { status: 200 }));
      
      const { result } = renderHook(() => useAdminActivities());
      
      await act(async () => {
        await result.current.loadActivities();
      });
      
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/activity');
    });
  });

  describe('useExecutiveReport', () => {
    it('should return expected interface', () => {
      const result = useExecutiveReport();
      
      expect(result).toHaveProperty('report');
      expect(result).toHaveProperty('isLoading');
      expect(result).toHaveProperty('loadReport');
      expect(typeof result.loadReport).toBe('function');
    });

    it('should call API with period parameter', async () => {
      mockFetch.mockResolvedValue(new Response('{"period": "monthly"}', { status: 200 }));
      
      const { loadReport } = useExecutiveReport();
      await loadReport('monthly');
      
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/reports?period=monthly');
    });
  });

  describe('useGlobalSearch', () => {
    it('should return expected interface', () => {
      const result = useGlobalSearch();
      
      expect(result).toHaveProperty('searchResults');
      expect(result).toHaveProperty('isLoading');
      expect(result).toHaveProperty('performSearch');
      expect(typeof result.performSearch).toBe('function');
    });

    it('should call search API with encoded query', async () => {
      mockFetch.mockResolvedValue(new Response('{"results": []}', { status: 200 }));
      
      const { performSearch } = useGlobalSearch();
      await performSearch('test@example.com');
      
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/search?q=test%40example.com&limit=20');
    });

    it('should skip API call for empty search', async () => {
      const { performSearch } = useGlobalSearch();
      await performSearch('');
      
      expect(mockFetch).not.toHaveBeenCalled();
    });
  });

  describe('useGuestJourney', () => {
    it('should return expected interface', () => {
      const result = useGuestJourney();
      
      expect(result).toHaveProperty('selectedGuest');
      expect(result).toHaveProperty('isLoading');
      expect(result).toHaveProperty('loadGuestJourney');
      expect(result).toHaveProperty('clearSelectedGuest');
      expect(typeof result.loadGuestJourney).toBe('function');
      expect(typeof result.clearSelectedGuest).toBe('function');
    });

    it('should call API with guest ID', async () => {
      mockFetch.mockResolvedValue(new Response('{"id": "guest123"}', { status: 200 }));
      
      const { loadGuestJourney } = useGuestJourney();
      await loadGuestJourney('guest123');
      
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/guests/guest123/journey');
    });
  });

  describe('error handling', () => {
    it('should handle fetch errors with toast notifications', async () => {
      mockFetch.mockRejectedValue(new Error('Network error'));
      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();
      
      const { loadStats } = useAdminStats();
      await loadStats();
      
      expect(mockToast).toHaveBeenCalledWith({
        title: 'Error',
        description: 'Failed to load admin statistics. Please refresh.',
        variant: 'destructive',
      });
      
      consoleSpy.mockRestore();
    });

    it('should handle HTTP error responses', async () => {
      mockFetch.mockResolvedValue(new Response('Not found', { status: 404 }));
      
      const { loadPolicies } = useAdminPolicies();
      await loadPolicies();
      
      // Should complete without throwing but not update state
      expect(mockFetch).toHaveBeenCalledWith('/api/admin/policies');
    });
  });
});